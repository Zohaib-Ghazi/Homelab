---
- import_tasks: packages.yml
- import_tasks: iam.yml

#Hashicorp Vault + Ansible Guide: https://medium.com/@mitesh_shamra/setup-hashicorp-vault-using-ansible-fa8073a70a56

- name: Copy vault-config to dest
  ansible.builtin.copy:
    src: vault-config.hcl
    dest: "{{ vault_config }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0770
  become: yes

- name: Copy vault service config to dest
  ansible.builtin.copy:
    src: vault.service
    dest: "{{ vault_service_dest }}"
    owner: root
    group: root
    #mode: 0770
  become: yes
  #TODO notify: systemd_reload

- name: restart systemd
  ansible.builtin.systemd:
    daemon_reload: yes
  become: yes

- name: Download Hashicorp Vault GPG key
  ansible.builtin.shell:
    cmd: |
      gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys AA16FCBCA621E701
      gpg --export AA16FCBCA621E701 | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  register: gpg_key_downloaded
  
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  become: yes

- name: Install Vault
  ansible.builtin.apt:
    name: vault
    # version: #TODO add explicit version 
    state: present
  become: yes
  register: vault_installed
  
- name: Verify Vault installation
  ansible.builtin.shell:
    cmd: vault --version
  register: vault_version

- name: Display Vault version
  ansible.builtin.debug:
    var: vault_version.stdout

- name: Change owner and group of the vault binary
  ansible.builtin.file:
    path: /usr/bin/vault
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
  become: yes
  register: vault_binary_ownership_changed

- name: Display the output of the vault binary ownership change
  ansible.builtin.debug:
    var: vault_binary_ownership_changed

- name: Set the vault binary capabilities to allow it to bind to port 8200
  ansible.builtin.capabilities:
    path: /usr/bin/vault
    capability: cap_ipc_lock+ep
    state: present
  become: yes
  register: vault_capabilities_set

- name: Display the output of the vault capabilities set
  ansible.builtin.debug:
    var: vault_capabilities_set
  

#TODO: Add logic to check if running as first-time setup or after-the-fact, as to prevent the self-signed cert from being generated again
- name: Generate a self-signed TLS certificate (including DNS value) and private key
  ansible.builtin.shell:
    cmd: |
      openssl req -x509 -newkey rsa:4096 -sha256 -days 365 \
      -nodes -keyout /opt/vault/tls/vault-key.pem -out /usr/local/share/ca-certificates/vault-cert.crt \
      -subj "/O=Homelab/CN=naizoyden.net" \
      -addext "subjectAltName = DNS:PROD-RootCA.naizoyden.net,IP:10.0.0.101"
  become: yes
  register: tls_cert_generated

#- name: Generate a self-signed TLS certificate (including DNS value) and private key
#  ansible.builtin.shell:
#    cmd: |
#      openssl req -x509 -newkey rsa:4096 -sha256 -days 365 \
#      -nodes -keyout /opt/vault/tls/vault-key.pem -out /opt/vault/tls/vault-cert.pem \
#      -subj "/O=Homelab/CN=naizoyden.net" \
#      -addext "subjectAltName = DNS:PROD-RootCA.naizoyden.net,IP:10.0.0.101"
#  become: yes
#  register: tls_cert_generated

- name: run update-ca-certificates command to update the CA certificates
  ansible.builtin.command:
    cmd: update-ca-certificates
  become: yes
  register: ca_certificates_updated

- name: Copy the generated certificate from remote to local using fetch
  ansible.builtin.copy:
    src: "{{ vault_CACert }}"
    dest: "{{ vault_CACert_dest }}"
    remote_src: yes
  become: yes
  register: cert_fetched

- name: Change ownership of the CA & certificate files to be owned by root and world-readable
  ansible.builtin.file:
    path: "{{ vault_CACert }}"
    owner: root
    group: root
    mode: 0644
  become: yes
  register: cert_ownership_changed  

- name: Change ownership of the private key to allow the Vault service to read the file, and only be readable by the Vault service
  ansible.builtin.file:
    path: "{{ vault_key }}"
    owner: root
    group: "{{ vault_group }}"
    mode: 0640
  become: yes
  register: key_ownership_changed

- name: Display the output of the private key ownership change
  ansible.builtin.debug:
    var: key_ownership_changed

- name: set Vault global environment variables
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: '{{ item }}'
    state: present
  with_items:
    - 'VAULT_ADDR="{{ vault_addr }}"'
    - 'VAULT_CACERT="{{ vault_CACert }}"'
    - 'VAULT_TOKEN=""'
    - 'LOG_FILE="{{ vault_log_dir }}"'
  become: yes
  register: vault_env_vars_set

- name: Enable vault service to start on boot
  ansible.builtin.systemd:
    name: vault
    enabled: yes
  become: yes
  register: vault_service_enabled

- name: Restart server to apply changes and ensure vault service starts correctly
  ansible.builtin.reboot:
    msg: "Rebooting to apply changes"
    connect_timeout: 5
    reboot_timeout: 600
    test_command: whoami
  become: yes
  register: reboot_result
  when: vault_service_enabled.changed

- name: Initialize the vault as a specific user
  ansible.builtin.shell:
    cmd: vault operator init -key-shares=1 -key-threshold=1 -format json
  register: vault_init
  #become: yes
  become_user: "{{ vault_user }}"
  when: vault_init is not defined or vault_init.changed

- name: Save the vault init output to a file
  ansible.builtin.copy:
    content: "{{ vault_init.stdout }}"
    dest: "{{ unseal_dir }}/vault_init.json"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes

- name: Extract the unseal key from the vault init output
  ansible.builtin.shell: |
    jq -r '.unseal_keys_b64[0]' {{ unseal_dir }}/vault_init.json
  become: yes
  register: vault_unseal_key_extracted

- name: Extract the root key from the vault init output
  ansible.builtin.shell: |
   jq -r '.root_token' {{ unseal_dir }}/vault_init.json
  become: yes
  register: vault_root_token_extracted

- name: set fact for vault unseal key
  ansible.builtin.set_fact:
    vault_unseal_key: "{{ vault_unseal_key_extracted.stdout }}"
    vault_root_token: "{{ vault_root_token_extracted.stdout }}"

#- name: Display the vault unseal key
#  ansible.builtin.debug:
#    msg: "Vault Unseal Key: {{ vault_unseal_key }}"

#- name: Display the vault root token
#  ansible.builtin.debug:
#    msg: "Vault Root Token: {{ vault_root_token }}"

- name: set env variable for root token 
  ansible.builtin.shell: 
    cmd: echo "export VAULT_TOKEN={{ vault_root_token }}"
  become: yes 

- name: Unseal vault by providing unseal key
  ansible.builtin.shell:
    cmd: vault operator unseal {{ vault_unseal_key }}
  become_user: vault
  register: vault_unsealed

- name: Login to the vault
  ansible.builtin.shell:
    cmd: vault login {{ vault_root_token }}
  become_user: vault  
  register: vault_logged_in

- name: enable vault audit
  ansible.builtin.shell:
    cmd: vault audit enable file file_path={{ vault_audit_dir }}
  become_user: "{{ vault_user }}"